name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.configuration }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
        include:
          - os: ubuntu-latest
            test-framework: net9.0
          - os: windows-latest  
            test-framework: net9.0
          - os: macos-latest
            test-framework: net9.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        include-prerelease: true

    - name: Restore dependencies
      run: dotnet restore Src/ILGPU.sln

    - name: Build solution
      run: dotnet build Src/ILGPU.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Build test projects
      run: |
        dotnet build ILGPU.Tests.UniversalAccelerators --configuration ${{ matrix.configuration }} --no-restore
        
    - name: Run CPU tests
      run: dotnet test Src/ILGPU.Tests.CPU --configuration ${{ matrix.configuration }} --framework ${{ matrix.test-framework }} --no-build --logger "trx;LogFileName=cpu-tests.trx"
      continue-on-error: true

    - name: Run Algorithm tests  
      run: dotnet test Src/ILGPU.Algorithms.Tests.CPU --configuration ${{ matrix.configuration }} --framework ${{ matrix.test-framework }} --no-build --logger "trx;LogFileName=algorithm-tests.trx"
      continue-on-error: true

    - name: Run Universal Accelerator tests
      run: dotnet test ILGPU.Tests.UniversalAccelerators --configuration ${{ matrix.configuration }} --framework ${{ matrix.test-framework }} --no-build --logger "trx;LogFileName=universal-tests.trx"
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}
        path: "**/*.trx"

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        include-prerelease: true

    - name: Restore dependencies
      run: dotnet restore Src/ILGPU.sln

    - name: Build solution
      run: dotnet build Src/ILGPU.sln --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test ILGPU.Tests.UniversalAccelerators \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coverage-report'
        reporttypes: 'Html;Cobertura'

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: coverage-report/Cobertura.xml
        minimum_coverage: 90
        fail_below_threshold: true

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        include-prerelease: true

    - name: Build benchmarks
      run: |
        dotnet build Src/ILGPU.sln --configuration Release
        
    - name: Run FFT benchmarks
      run: |
        echo "Running FFT performance benchmarks..."
        # Would run actual benchmark suite here
        
    - name: Run ML accelerator benchmarks  
      run: |
        echo "Running ML accelerator benchmarks..."
        # Would run actual benchmark suite here

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: security-scan-results.sarif

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        include-prerelease: true

    - name: Create packages
      run: |
        dotnet pack Src/ILGPU/ILGPU.csproj --configuration Release --output ./packages
        dotnet pack Src/ILGPU.Algorithms/ILGPU.Algorithms.csproj --configuration Release --output ./packages

    - name: Validate packages
      run: |
        dotnet tool install -g dotnet-validate
        dotnet validate package local ./packages/*.nupkg

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg